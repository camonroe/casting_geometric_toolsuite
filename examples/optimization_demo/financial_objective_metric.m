function objective = financial_objective_metric( ...
    options, ...
    rotation_function, ...
    angles ...
    )

% Constants
DIM = 3;

% setup
cleanup_tasks = onCleanup( @() Print.verbosity( true ) );
Print.verbosity( false );

% process
[ c, m, f ] = rotation_function( angles );
urgc = UnriggedCasting( c, f );
rg = Rigging( urgc, m, f, c, options.component_count );
rgc = RiggedCasting( urgc, rg );
uc = Undercuts( m, DIM );
mld = Mold( rgc, uc );
flsk = Flask( mld );

% rigging (feeders included here)
inaccessible_penalty = ...
     f.get_exclusive_volumes() ...
    .* ( 1 - f.get_accessibility_ratios() );
rigging_cost = ...
    sum( inaccessible_penalty ) .* options.alloy_cost_per_volume ...
    + rgc.volume .* options.alloy_cost_per_volume ...
    + f.get_total_interface_area() .* options.cutting_cost_per_area ...
    + rg.gate_area .* options.cutting_cost_per_area;

% mold
mold_cost = mld.volume .* options.mold_cost_per_volume;

% undercuts
undercut_cost = uc.volume .* options.core_cost_per_volume;

% flask
flask_material_cost = ...
    flsk.volume ...
    .* options.tooling_stock_cost_per_volume;
flask_processing_cost = ...
    ( rgc.envelope.volume - rgc.volume ) ...
    .* options.tooling_processing_cost_per_volume_removed;
flask_cost = ...
    ( flask_material_cost + flask_processing_cost ) ...
    ./ options.order_quantity;

% total
objective = ...
    rigging_cost ...
    + mold_cost ...
    + undercut_cost ...
    + flask_cost;

% tracking
fprintf('\b|\n');

end

